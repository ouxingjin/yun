
2019 年 01 月 09日

@##################################################
Shell 脚本基础

  脚本：可以执行的一个文件，运行之后可以实现某种功能

什么时Shell脚本
 提前设计可执行语句，用来完成特定任务的文件
   -----解释型程序
   -----顺序、批量执行


常见脚本语言： Bash Shell  
            Python/Perl/Ruby
            JSP/PHP/ASP/CGI
            JavaScript

#############################################################

创建用户 dc=Shell 语言中useradd dc

  脚本：把我们学过的命令堆积到一个文件中

案例：利用Shell语言
       实现在屏幕命令终端，输出 hello world---->#任何脚本语言的第一个脚本

[root@server0 ~]# vim /root/hello.sh
[root@server0 ~]# /root/hello.sh        #绝对路径方式运行
-bash: /root/hello.sh: 权限不够

[root@server0 ~]# chmod ugo+x /root/hello.sh #赋予脚本执行权限
[root@server0 ~]# /root/hello.sh

1)输出当前红帽系统的版本信息
2）输出当前使用的内核版本
3）输出当前系统的主机名
4）输出第一张网卡的前两行信息

[root@server0 ~]# vim /root/hello.sh
#!/bin/bash                     #指定以下代码用那个程序解释
echo hello world
cat /etc/redhat-release
uname -r
hostname
ifconfig | head -2
[root@server0 ~]# /root/hello.sh



###############################################################
规范Shell脚本的一般组成
--- #！环境声明（Sha-Bang）：指定以下代码用那个程序解释
--- # 注释文本（10行以上的脚本，必须写注释）
--- 可执行代码

重定向输出：
   >：只收集前面命令正确输出
   2>：只收集前面命令错误输出
   &> ：收集前面命令正确输出与错误输出
[root@server0 ~]# echo 123 > /opt/1.txt
[root@server0 ~]# cat /opt/1.txt
[root@server0 ~]# cat /opt/1.txt /a

[root@server0 ~]# cat /opt/1.txt /a  > /opt/a.txt
[root@server0 ~]# cat /opt/a.txt

[root@server0 ~]# cat /opt/1.txt /a  2> /opt/a.txt
[root@server0 ~]# cat /opt/a.txt

[root@server0 ~]# cat /opt/1.txt /a  &> /opt/a.txt
[root@server0 ~]# cat /opt/a.txt

补充：
   ''：单引号--取消所有字符特殊意义
[root@server0 ~]# echo '* ? | &'

 $()或``反撇号：将命令的输出，直接参与下一个命令的执行
[root@server0 ~]# date +%F
[root@server0 ~]# cd /opt/

[root@server0 opt]# mkdir nsd-$(date +%F)
[root@server0 opt]# ls 

[root@server0 opt]# mkdir mydir-`date +%F`
[root@server0 opt]# ls 

[root@server0 opt]# mkdir $(hostname)-$(date +%F)
[root@server0 opt]# ls 


脚本的创建过程
如何写出自己的第一个Shell脚本
 一.明确任务需求：1.按自然语言拆分小步骤
                   2.按顺序整理好（先做什么、后做什么）

二.编写代码文件：1.每一个步骤怎么实现
                  2.转换成命令行保存到脚本文件 

三.测试并完善：1.运行脚本，并根据结果排除错误
                2.代码优化、用户友好处理


##########################################################
案例2：创建用户设置秘密
[root@server0 opt]# vim /root/user.sh
#! /bin/bash 
useradd nsd02
echo 123456 | passwd --stdin nsd02

[root@server0 opt]# chmod +x /root/user.sh  #给脚本设置执行权限
[root@server0 opt]# /root/user.sh 


/dev/null:黑洞设备 

[root@server0 opt]# vim /root/user.sh
#! /bin/bash 
useradd nsd05 &> /dev/null
echo '用户nsd05创建成功'
echo 123456 | passwd --stdin nsd05 &> /dev/null
echo '用户nsd05密码设置成功'
[root@server0 opt]# /root/user.sh 



[root@server0 opt]# vim /root/user.sh
#! /bin/bash 
a=harry
useradd $a &> /dev/null
echo 用户$a创建成功
echo 123456 | passwd --stdin $a &> /dev/null
echo 用户$a密码设置成功
[root@server0 opt]# /root/user.sh 


#######################################################
为了增加脚本的灵活性，适应多变的环境与需求 所以使用 变量
什么是变量：
   变量=容器
-----以不变的名称，存储可以变化的值
  定义：变量名= 存储的值（变量值） 
变量的作用：1.方便以固定名称重复使用某个值
             2.提高对任务需求、运行环境变化的适应能力


定义/赋值变量
设置变量时的注意事项：
 ---等号两边不能有空格
 ---变量名只能由字母/数字/下划线组成，区分大小写
 ---变量名不能以数字开头，不要使用关键字和特殊字符
 ---若指定的变量名已存在，相当于为此变量重新赋值


查看/引用变量


---查看变量值：echo $变量名、echo${变量名}--区分

[root@server0 opt]# a=rhel
[root@server0 opt]# echo $a
rhel
[root@server0 opt]# echo  $a7

[root@server0 opt]# echo ${a}7  #区分变量和常量
rhel7


运维角度的变量区分

根据变量的用途不同区分
 1. 环境变量：由系统定义且赋值完成，用户直接使用即可
               变量名一般都大写，用来设置用户/系统环境

    USER=当前登陆系统的用户名
[root@server0 opt]# echo $USER
root
[root@server0 opt]# su - student
[student@server0 ~]$ echo $USER
student


 2.位置变量：由系统定义且赋值完成，用户直接使用即可
           bash内置，存储执行脚本时提供的命令行参数

系统将所有数字用于作位置变量

执行脚本时提供的命令行参数
-----表示为$n,n为序号a
-----$1、$2、..${10}、${11}、....#相对应的参数个数

[root@server0 opt]# vim /root/user.sh 
#! /bin/bash 
useradd $1 &> /dev/null
echo 用户$1创建成功
echo 123456 | passwd --stdin $2 &> /dev/null
echo 用户$1密码设置成功

[root@server0 opt]# /root/user.sh xixi   #脚本后面写一个 xixi 为$1对应的值

[root@server0 opt]# /root/user.sh haha


[root@server0 opt]# vim /root/1.sh
#! /bin/bash
cat -n $1 | head -$2 > /opt/red.txt
echo 请显示$1文件内容的前$2行，写入/opt/red.txt

[root@server0 opt]# chmod +x /root/1.sh
[root@server0 opt]# /root/1.sh /etc/passwd 3
已将/etc/passwd文件内容的前3行，写入/opt/red.txt
[root@server0 opt]# cat /opt/red.txt 
     1	root:x:0:0:root:/root:/bin/bash
     2	bin:x:1:1:bin:/bin:/sbin/nologin
     3	daemon:x:2:2:daemon:/sbin:/sbin/nologin


 3.预定义变量：由系统定义且赋值完成，用户直接使用即可
             bash内置，可直接调用的特殊值，不能直接修改

    $# 已加载的位置变量的个数（求和）-----运行脚本时，命令行输入参数的个数
    $*  所有位置变量的值
    $?  程序退出后的状态值，0表示正常，其他值异常
[root@server0 opt]# vim /root/2.sh
#! /bin/bash
echo $1
echo $2
echo $#
echo $*
[root@server0 opt]# chmod +x /root/2.sh
[root@server0 opt]#  /root/2.sh xixi haha lele hehe
xixi
haha
4
xixi haha lele hehe

[root@server0 opt]# vim /root/3.sh
#!/bin/bash
echo 您一共输入$#个参数，分别是$*
[root@server0 opt]# chmod +x/root/3.sh
[root@server0 opt]#  /root/3.sh dc tc dz tz
您一共输入4个参数，分别是dc tc dz tz


   注意： $?  程序退出后的状态值，0表示正常，其他值异常
           常用于判断上一条命令是否成功运行


四.自定义变量：用户自主设置、修改及使用


#########################################################3
条件测试

检查文件状态：
	-e:文档存在为真
	-d:文档存在,且必须为目录才为真
	-f:文档存在,且必须为文件才为真
	-r:文档存在,且必须对其具备读取权限才为真
	-w:文档存在,且必须对其具备写入权限才为真
	-x:文档存在,且必须对其具备执行权限才为真

[root@server0 opt]# [ -e /etc ]  #判断/etc是否存在
[root@server0 opt]# echo $?
0
[root@server0 opt]# [ -e /abc ]  #判断/abc是否存在
[root@server0 opt]# echo $?
1
[root@server0 opt]# [ -d /etc ]   #判断/etc是否是目录
[root@server0 opt]# echo $?
0
[root@server0 opt]# [ -f /etc/passwd ]  #判断/etc/passwd是否文件
[root@server0 opt]# echo $?
130



比较整数大小
	-gt：大于
	-ge：大于等于
	-eq：等于
	-ne：不等于
	-lt：小于
	-le：小于等于

[root@server0 opt]# [ 1 -gt 1 ]
[root@server0 opt]# echo $?
1
[root@server0 opt]# [ 1 -ne 5 ]
[root@server0 opt]# echo $?
0
[root@server0 opt]# [ 1 -lt 5 ]
[root@server0 opt]# echo $?
0
[root@server0 opt]# [ 1 -le 5 ]
[root@server0 opt]# echo $?





字符串比对
  	==：字符串相等为真
 	！=：字符串不相等为真

[root@server0 opt]# [ redhat ==  student ] 
[root@server0 opt]# echo $?
1
[root@server0 opt]# [ redhat ==  redhat ] 
[root@server0 opt]# echo $?
0
[root@server0 opt]# [ redhat !=  student ] 
[root@server0 opt]# echo $?
0
[root@server0 opt]# [ $USER ==  root ] 
[root@server0 opt]# echo $?
0


#################################################
if选择结构

if 单分支处理





if双分支处理:

  if [条件测试];then
      命令序列xx
  else
      命令序列xx
  fi


[root@server0 opt]# vim /root/if01.sh
#!/bin/bash
if [ $1 -eq 5 ];then
  echo 你好
else
  echo 哈楼
fi
[root@server0 opt]# chmod +x /root/if01.sh
[root@server0 opt]#  /root/if01.sh  1
[root@server0 opt]#  /root/if01.sh  2
[root@server0 opt]#  /root/if01.sh  5

案例：书写脚本/root/ip.sh
      利用位置变量实现，命令行传递参数
      用户输入IP地址，判断如果本机能够ping通，则输出 可以通信
      用户输入IP地址，判断如果本机不能够ping通，则输出 不可以通信

提示：ping命令
      ping  选项 -c 可以指定ping次数

[root@server0 opt]# vim /root/ip.sh
#!/bin/bash
ping -c 3 $1 > /dev/null
if [ $? -eq 0 ];then
  echo $1可以通信
else 
  echo $1不可以通信
fi
[root@server0 opt]# chmod +x /root/ip.sh
[root@server0 opt]# /root/ip.sh 192.168.1.1
192.168.1.1不可以通信
[root@server0 opt]# /root/ip.sh 172.25.0.11
172.25.0.11可以通信


if多分支处理
  if [条件测试1];then
       命令序列xx
  elif  [条件测试2];then
       命令序列yy
  elif  [条件测试3];then
       命令序列aa
   .....

  else
       命令序列zz
   fi   


案例：书写脚本/root/num.sh
      利用位置变量实现，命令行传递参数
      用户输入考试成绩
      如果考试成绩大于等于90，则输出 优秀
      如果考试成绩大于等于80，则输出 良好
      如果考试成绩大于等于70，则输出 一般
      如果考试成绩大于等于60，则输出 合格
      如果以上均不满足，则输出 一首凉凉送给你

[root@server0 opt]# vim /root/num.sh
#!/bin/bash
if [ $1 -ge 90 ];then
     echo 优秀
elif [ $1 -ge 80 ];then
     echo 良好
elif [ $1 -ge 70 ];then
     echo 一般
elif [ $1 -ge 60 ];then
     echo 合格
else
     echo 再牛的肖邦也弹不出你的悲伤
fi
[root@server0 opt]# chmod +x /root/num.sh
[root@server0 opt]#  /root/num.sh 100
优秀
[root@server0 opt]#  /root/num.sh 89
良好
[root@server0 opt]#  /root/num.sh 79
一般
[root@server0 opt]#  /root/num.sh 69
合格
[root@server0 opt]#  /root/num.sh 6
再牛的肖邦也弹不出你的悲伤


#########################################
列表式循环

for循环结构（最基础的循环结构）

for循环处理
遍历/列表式循环
----根据变量的不同取值，重复执行xx处理
  for  变量名 in 值列表
   do
        命令序列
   done


for 鲜血车  in  队伍：zhangsan  lisi dc  harry
 do 
     抽血
 done

[root@server0 opt]# vim /root/for.sh
#!/bin/bash
for a in zhangsan lisi wangwu harry dc
do
 useradd $a > /dev/null
 id $a
 echo $a创建成功
done
[root@server0 opt]# chmod +x /root/for.sh
[root@server0 opt]# /root/for.sh


造数工具：可以制造连续范围的数字
      {起始点..结束点}
  制造 1～50的数字：{1..50}

[root@server0 opt]# vim /root/for01.sh
#!/bin/bash
for  a  in  {1..20}
do 
  echo hello world
done
[root@server0 opt]# chmod +x /root/for01.sh
[root@server0 opt]# /root/for01.sh



############################################################

案例2：编写一个判断脚本
再server0 上创建 /root/foo.sh 脚本
1）当运行/root/foo.sh redhat，输出为fedora
2）当运行/root/foo.sh fedora，输出为redhat
3）当没有任何参数或者参数不是redhat或者fedora时
   其错误信息输出 /root/foo.sh redhat|fedora

[root@goodgame ~]# vim /root/foo.sh 
#!/bin/bash
if [ $# -eq 0 ];then            #判断用户有没有输入参数（$#的值是否为0）
   echo  '/root/foo.sh redhat|fedora' >&2  #变成错误输出
   exit 38     #设置程序退出返回的状态（echo $?的值）
elif  [ $1 == redhat ];then
   echo fedora
elif  [ $1 == fedora ];then
    echo redhat
else
   echo '/root/foo.sh redhat|fedora' >&2
   exit 39    #设置程序退出返回的状态（echo $?的值）
fi
[root@goodgame ~]# chmod +x /root/foo.sh
[root@goodgame ~]# /root/foo.sh hh
/root/foo.sh redhat|fedora
[root@goodgame ~]# echo $?
39
[root@goodgame ~]# /root/foo.sh 
/root/foo.sh redhat|fedora
[root@goodgame ~]# echo $?


################################################
案例5：编写一个批量添加用户脚本
在server0 上创建/root/bathchusers脚本
1）此脚本要求提供用户名列表文件作为参数
2）如果没有提供参数，此脚本应该给提示usage：/root/bathchusers，
   退出并返回相应值
3）如果提供一个不存在的文件，此脚本应该给提示Input file not found,
      退出并返回相应值
4)新用户的登陆Shell为/bin/false，无需设置密码
5）用户列表测试文件 http://classroom/pub/materials/userlist


[root@goodgame ~]# vim /root/userlist       #首先写用户名列表
natansha
tieniu
lisi
hehe
haha
[root@goodgame ~]# chmod ugo=rwx /root/userlist---- 可不写
[root@goodgame ~]# vim /root/bathchusers.sh 
#!/bin/bash
if  [ $# -eq 0 ];then
     echo 'usage：/root/bathchusers'
     exit 3
elif [ -f $1 ];then
   for  a  in  $(cat $1)
   do
      useradd -s /bash/file  $a &> /dev/null
      echo $a创建成功
  done
else
     echo 'Input file not found'
     exit 4
fi
[root@goodgame ~]#chmod +x /root/bathchusers.sh
































