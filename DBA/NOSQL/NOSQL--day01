2019-03-25

######################################<NOSQL>#######################################################
RDBMS：关系型数据库管理系统
   - 按照预先设置的组织结构，将数据存储在物理介质上
   - 数据之间可以做关联操作
主流的RDBMS软件：Oracle、 DB2 、 MS SQL Server、 MySQL、 Mariadb

NoSQL：
	泛指非关系型数据库
	不需要预先定义数据库存储结构
	表的每条记录都可以有不同的类型和结构
主流软件：Redis、MongoDB、Memcached、CouchDB、Neo4j、FlockDB	

Redis介绍：
	1）远程字典服务器
	2）是一款高性能的（key/values）分布式内存数据库
	3）支持数据持久化，可以把内存里的数据保存到硬盘中
	4）也支持 list、hash、set、zset 数据类型
	5）支持 master-slave 模式数据备份
	6）中文网站www.redis.cn

客户端访问web，web服务器先到自己的内存存储服务器上查找、内存存储服务器上没有数据，再从硬盘中查找
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
一、部署Redis服务器	192.168.4.50 主机
	需要软件包：redis-4.0.8.tar.gz  #该tar包在soft目录中
   1.1 装包
	]# rpm -qa gcc   #先检查是否安装了gcc依赖包
	]# yum -y install gcc  #安装依赖包
	]# tar -zxvf redis-4.0.8.tar.gz  #源码编译安装
	]# cd redis-4.0.8
	]# make && make install   #由于该包已提供 Makefile ，所以不用再执行./configure
    
  1.2 初始化配置-----都是在安装目录下进行
	]# cd redis-4.0.8
	]# ./utils/install_server.sh  #在安装包目录下执行，所有选项都为默认即可
		#初始化后自动启动服务

	启动/停止服务：
	]# ps -C redis-server      #查看进程
	]# ss -antulp |grep 6379   #查看服务端口
	]# redis-cli   #本机连接服务，不需要加选项 
		127.0.0.1:6379> ping    #ping 为空--->能连上
		PONG
		127.0.0.1:6379> set name bob   #set存储数据
		OK
		127.0.0.1:6379> get name   #读取数据
		"bob"
		127.0.0.1:6379> exit

	redis-4.0.8]# /etc/init.d/redis_6379 stop  #停止服务后，会自动将内存中数据写入硬盘
				#将数据写入数据库目录下：/var/lib/redis/6379/
	redis-4.0.8]# /etc/init.d/redis_6379 start #启动服务

	没有安装gcc，就先解压编译安装会失败；需要将解压的先删除==>安装gcc==>再执行解压安装

  1.3 常用操作指令：
	1） set keyname  keyvalue  #存储数据
	2） get keyname		  #获取数据
	3） select  数据库编号0-15	   #切换数据库
	4） keys *			  #查看所有变量
	5） keys a？			  #查看指定变量
	6） EXISTS keyname		  #测试是否存在, 1==>存在、0==>不存在
	7） ttl keyname		  #查看生存时间，有效时间 -1-->永久有效  -2--->不存在或有效期过了
	8） type keyname	        # 查看 变量的类型
	9） move keyname dbname    #移动变量到其他数据库
	10） expire  keyname 10    #设置有效时间,为10s
	11） del  keyname	 	  #删除指定变量
	12） flushall		  #清空所有库所有数据
	13） flushdb	  		  #清空指定数据库的所有数据
	14） save			  #手动保存所有变量
	15） shutdown		  #关闭redis服务 ，/etc/init.d/redis_6379 stop效果一样
________________________________________________________________
常用配置选项：
	1）port 6379			#端口
	2）bind 127.0.0.1 		#IP地址
	3）tcp-backlog 511 	#tcp连接总数
	4）timeout  0		#连接超时时间 0表示没有设置连接超时时间
	5）tcp-keepalive 300	#长连接时间
	6）daemonize yes		#守护进程方式运行
	7）databases 16		#数据库个数，默认0～15 共16个
	8）logfile /var/log/redis_6379.log  #pid文件
	9）maxclients 10000	#并发连接数量
	10）dir /var/lib/redis/6379  #数据库目录

内存管理：
   内存清楚策略：
	1）volatile-lru      #最近最少使用（针对设置了TTL的key）
	2）allkeys-lru	  #删除最少使用的key
	3）volatile-random	  #在设置了TTL的key里随即移除
	4）allkeys-random	  #随即移除key
	5）volatile-ttl （minor TTL） #移除最近过期的key
	6）noeviction	   #不删除，写满时报错

  选项默认设置：
	1）maxmemory <bytes>     #最大内存
	2）maxmemory-policy noeviction  #定义使用策略
	3）maxmemory-samples 5	#选取模版数据的个数（针对lru和ttl策略）

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
127.0.0.1:6379> ttl x
(integer) -1     # -1 表示该变量用久有效

127.0.0.1:6379> ttl z
(integer) -2    #-2表示该变量不存在，有效时间过期了

127.0.0.1:6379> EXISTS sex
(integer) 1
127.0.0.1:6379> EXISTS gg
(integer) 
——————————————————————————————————————————————————
  1.4 配置文件解析：/etc/redis/6379.conf
	]# cp /etc/redis/6379.conf /root/  #备份配置文件
	]# vim /etc/redis/6379.conf
		.........
	    501: requirepass 123456  #设置连接密码，重启才能生效
	]# /etc/init.d/redis_6379  stop
	]# /etc/init.d/redis_6379  start
	[root@mysql-50 ~]# redis-cli
	127.0.0.1:6379> ping
	(error) NOAUTH Authentication required.
	127.0.0.1:6379> auth 123456   #输入正确的密码才能连接上

只要修改过密码、端口、ip中的任意一个，就不能用脚本停止服务，除非修改脚本
	]# redis-cli -h ip地址 -p 端口 -a 密码 shutdown   #要使用命令去停止
——————————————————————————————————————————————————————
  1.5 修改服务使用的ip地址和端口
	]# vim /etc/redis/6379.conf
	  ............
	 70   bind   192.168.4.50  #修改ip
	 93   port   6350          #修改端口

	~]# /etc/init.d/redis_6379 start  #脚本开启服务
	[root@mysql-50 ~]# ss -antulp |grep 6350   #查看端口信息
  tcp  LISTEN   0  128    192.168.4.50:6350  *:*  users:(("redis-server",pid=8573,fd=6)

	~]# redis-cli -h 192.168.4.50 -a 123456 -p 6350  #连接服务
——————————————————————————————————————————————————————
   1.6 修改/etc/init.d/redis_6379 脚本代码  使其可以停止设置了ip、端口、和密码的redis服务
	]# vim /etc/init.d/redis_6379
	  ............
	 43  $CLIEXEC -h 192.168.4.50 -p 6350 -a 123456 shutdown #值修改第43行

	~]# /etc/init.d/redis_6379 stop  #修改后可以使用脚步停止服务

*************************************************************************************************
二、部署LNMP+Redis
	要求：配置50主机运网站服务且可以解释php代码，并把网站的数据存储在本机的内存里。
	1 安装源码的nginx软件
	  ]# yum -y install gcc pcre-devel openssl-devel  #安装依赖包
	  ]# tar -zxvf nginx-1.12.2.tar.gz
	  ]# cd nginx-1.12.2
	  ]# ./configure --prefix=/usr/local/nginx
	  ]# make && make install

	2  安装管理php程序的php-fpm服务软件包
	   lnmp]# yum -y install php-fpm-5.4.16-42.el7.x86_64.rpm

	3  启动php-fpm服务
	   ]# systemctl start php-fpm
	   ]# ss -antulp | grep 9000   #查看9000端口

	4  修改nginx服务配置文件，开启支持php功能
	   ]# vim /usr/local/nginx/conf/nginx.conf
		...............
		location ~ \.php$ {
		    root           html;
		    fastcgi_pass   127.0.0.1:9000;
		    fastcgi_index  index.php;
		#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
		    include        fastcgi.conf;
		}
	5 启动nginx服务
	    ]# /usr/local/nginx/sbin/nginx -t   #检测配置文件是否修改正确
	    ]# /usr/local/nginx/sbin/nginx -s reload #重启服务

	6  编写php测试脚本
	   ]# vim /usr/local/nginx/html/test.php
		<?php
			echo "hello world!!!";
		?>
	7 客户端访问nginx服务的php脚本
	   ]# firefox http://192.168.4.50/tesst.php
	   ]# curl http://192.168.4.50/tesst.php

	8 安装mysql服务

#############################################################################

	9 配置php支持Redis
	   9.1 运行redis服务
	   9.2 配置php支持redis
		]# ce /root/soft/redis/lnmp
		]# yum -y install php
		]# yum -y install php-devel-5.4.16-42.el7.x86_64.rpm
		]# tar -zxvf php-redis-2.2.4.tar.gz
		]# cd phpredis-2.2.4
		]# phpize  #生成一个./configure和。。
		]# ./configure --with-php-config=/usr/bin/php-config
		]# make && make install
		]# ls /usr/lib64/php/modules  #安装完成后在该目录下生成对应的模块

	]# vim /etc/php.ini #加载模块
		.........
		728  extension_dir = "/usr/lib64/php/modules"  #指定模块路径
 		730  extension = "redis.so"
	]# systemctl restart php-fpm
	]# php -m | gep redis   #支持redis模块

	测试配置
	]# vim /usr/local/nginx/html/test.php
		<?php
		$redis = new redis();
		$redis ->connect("192.168.4.50",6350);
		$redis ->auth("123456");
		$redis ->set("school","tarena");
		echo $redis ->get("school");
		?>
	]# curl http://192.168.4.50/test2.php   #输出"tarena",在redis中也有school
















