2019-01-18

#########################################################################

Split分离解析-----在中国很流行

什么是分离解析
*当受到客户机的DNS查询请求的时候
   --- 能够区分客户机的来源地址
   --- 为不同类别的客户机提供不同的解析结果（IP地址）
             ----> 网通用户-----> 网通服务器
      www.qq.com
             ----> 电信用户-----> 电信服务器
总结：针对不同的客户端，提供

典型适用场景
*访问压力的网站，购买CDN提供的内容分发服务
   -- 在全国各地/不同网络内部署大量镜像服务节点
   -- 针对不同的客户机就近提供服务器

BIND的view视图
*根据源地址集合将客户机分类
   --不同客户机获得不同结果（待遇有差别）
   --分离解析，由上到下，依次匹配，匹配即停止
   --分类要合理，每一个客户端都要找到自己的分类
   --- 所有的zone ,都要在view的{}中

     view "a" {
       match-clients { 来源地址1; .. ..; };
       zone "12306.cn" IN {
         .......地址库1
        };   };

       view "b" {
       match-clients { 来源地址2; .. ..; };
       zone "12306.cn" IN {
         .......地址库2
          };   };


最后一个：view "c" {
        match-clients { any; };
        zone "12306.cn" IN {
         .......地址库n
          };   };
#########################################################################


[root@svr7 ~]# vim /etc/named.conf 
options {
	directory 	"/var/named";
};

acl test { 多个IP地址；};

view  "a" {
    match-clients { test;    };   192.168.4.207
     zone "tedu.cn" IN {
	type master;
	file "tedu.cn.zone";
  };
 zone "qq.com" IN {
	type master;
	file "qq.com.zone";
  };
};
view  "b" {
    match-clients { any;  };
     zone "tedu.cn" IN {
	type master;
	file "tedu.cn.other";
  };
zone "qq.com" IN {
	type master;
	file "qq.com.other";
  };
};

[root@svr7 ~]# vim /var/named/tedu.cn.zone 
$TTL 1D
@	IN SOA	@ rname.invalid. (
					0	; serial
					1D	; refresh
					1H	; retry
					1W	; expire
					3H )	; minimum
tedu.cn.	NS	svr7
svr7		A	192.168.4.7
www		A       192.168.4.100

[root@svr7 ~]# vim /var/named/tedu.cn.other 
$TTL 1D
@	IN SOA	@ rname.invalid. (
					0	; serial
					1D	; refresh
					1H	; retry
					1W	; expire
					3H )	; minimum
tedu.cn.	NS	svr7
svr7		A	192.168.4.7
www		A       1.2.3.4

[root@svr7 ~]# systemctl restart named




多区域的分离解析：每一个view中，zone


##############################################################
补充：



########################################################
RAID磁盘阵列


RAID0/1/10

RAID0，条带模式
--- 同一个文档分散存放在不同磁盘
--- 并写入以提高效率

RAID1，镜像模式
 --- 一个文档复制成多份，分别写入不同磁盘
 --- 多份拷贝提高可靠性，效率无提高
 --- 至少两块磁盘组成


RAID5/6

RAID5，高性价比模式
  -- 相当于RAID0和RAID1的折中方案   ----只要保证有两块磁盘同时完好，数据就不会丢失
  -- 需要至少一块磁盘的容量来存放校验数据
  --- 至少有三块磁盘组成

热备份：不需要人的参与


RAID6，高性价比/可靠模式
  -- 相当于扩展的RAID5阵列，提供2份独立校验方案
  -- 需要至少两块磁盘的容量来存放校验数据
  -- 至少四块磁盘组成


RAID 0+1/RAID 1+0
 --- 整合RAID0、RAID1的优势
 --- 并行存取提高效率、 镜像写入提高可靠性


############################################################################
进程管理

   程序：静态的代码  占用磁盘空间
   进程：动态执行的代码  占用CPU与内存
   
   标识：编号  PID
   父进程与子进程   树型结构


查看进程树
pstree---Processes Tree
   --格式：pstree [选项]  [PID或用户名]
常用命令选项
 ---- -a：显示完整的命令行
 ---- -p：列出对应PID编号

   systemd:上帝进程 （所有进程的父进程）

[root@svr7 named]# pstree -a lisi   #-a：显示完整的命令行

[root@svr7 named]# pstree -ap lisi


 ps---Processes Snapshot
   ---格式：ps [选项]
常用命令选项：
  - aux：显示当前终端所有进程（a）、当前用户在所有终端下的进程（x）、以用户格式输出（u）
  - -elf：



ps aux 操作
   ---列出正在运行的所有进程


ps -elf 操作
   ---列出正在运行的所有进程，常用于查询进程的父进程

    PPID：父进程的PID号
补充命令：统计行数 wc -l

请统计当前Linux系统，/etc下有多少个以.conf结尾的文件
[root@svr7 ~]# find /etc/ -name "*.conf" -type f | wc -l

[root@svr7 ~]# find /etc/ -name "*tab" -type f | wc -l

###########################################################################

进程动态排名
*top交互式工具
  -格式：top [-d 刷新秒数] [-U 用户名]

top交互操作指令
   -- ？：查看帮助（列出可用的按键指令）
  -- P、M：根据 %CPU、%MEM 降序排序
  -- T：根据进程消耗的 TIME 降序排列
  -- K：杀死指定的进程
  -- q：退出top程序

排序： 按大写的P  进程CPU使用的排序
        按大写的M  进程内存使用的排序



检索进程
pgrep--Process Grep
 --- 用途：pgrep [选项]...查询条件
常用命令选项
  --- -l：输出进程名，而不仅仅是 PID
  --- -U：检索指定用户的进程
  --- -t:检索指定终端的进程
  --- -x：精确匹配完整的进程名

[root@svr7 ~]# pgrep -l log

[root@svr7 ~]#  pgrep a
[root@svr7 ~]# pgrep -l a
[root@svr7 ~]# pgrep -lU lisi


pts图形命令行终端


###########################################################################
控制进程

进程的前后台调度
*前台启动
  ---输入正常命令行，运行期间占用当前终端

*后台启动
  ----在命令行的末尾添加“&”符号，不占用当前终端

ctrl + z组合键：挂起当前进程（暂停并转入后台）
jobs命令：查看后台任务列表
fg命令：将后台任务恢复到前台运行
bg命令:激活后台被挂起的任务

[root@svr7 ~]# sleep 900 &       #正在运行放入后台
[1] 6054
[root@svr7 ~]# jobs              #查看后台进程信息
[1]+  运行中               sleep 900 &
[root@svr7 ~]# sleep 800
^Z            #按crtl+z 暂停放入后台
[2]+  已停止               sleep 800
[root@svr7 ~]# jobs
[1]-  运行中               sleep 900 &
[2]+  已停止               sleep 800
[root@svr7 ~]# bg 2        #将后台编号为2的进程继续运行
[2]+ sleep 800 &
[root@svr7 ~]# jobs

[root@svr7 ~]# fg 1     #将后台编号为1的进程，恢复到前台继续运行
sleep 900
^C           #按crtl+c结束该进程
[root@svr7 ~]# jobs
[2]+  运行中               sleep 800 &
[root@svr7 ~]# fg 2
sleep 800
^C
[root@svr7 ~]# jobs -l #列出PID


杀死进程
干掉进程的不同方法
-- Ctrl+c 组合键，中断当前命令程序
-- kill  [-9] PID...、kill [-9] %后台任务编号
-- killall [-9] 进程名...
-- pkill 查找条件

[root@svr7 ~]# sleep 899 &
[1] 6390
[root@svr7 ~]# sleep 00 &
[2] 6399
[root@svr7 ~]# sleep 678 &
[root@svr7 ~]# kill 6390
[root@svr7 ~]# jobs -l
[root@svr7 ~]# kill -9 6400
[root@svr7 ~]# killall sleep

 ~]#pkill -9 -U harry  #强制踢出用户
 ~]#killall -9 -U harry #强制踢出用户


#############################################################

日志管理

日志的功能
*系统和程序的“日记本”
   -- 记录系统、程序运行中发生的各种事情
   -- 通过查看日志，了解及排除故障
  -- 信息安全控制的“依据”

内核及系统日志







常见的日志文件
  /var/log/messages  记录内核消息、各种服务的公共消息
  /var/log/dmesg     记录系统启动过程的各种消息
  /var/log/cron      记录与cron计划任务相关的消息
  /var/log/maillog   记录邮件收发相关的消息
  /var/log/secure    记录与访问限制相关的安全消息
 


查看文本日志消息
通用分析工具
 -- tail、tailf、less、grep等文本浏览/检索命令
 -- awk、sed等格式化过滤工具
专用分析工具
  -- webmin系统管理套件
  -- webalizer、AWStast等日志统计套件 



用户登陆分析
*user、who、w 命令
   -- 查看已登陆的用户信息，详细度不同
*last、lastb 命令
  -- 查看最近登陆成功/失败的用户信息




[root@svr7 ~]# last -2   //最近两条登入记录
[root@svr7 ~]# lastb -2  //最近两条登陆失败事件

########################################################################
日志消息的优先级
*Linux内核定义的事件紧急程度
  -- 分为0～7 共8种优先级
  -- 其数值越小，表示对应事件越紧急/重要


使用journalctl工具



####################################################################

systemctrl控制

*Linux系统和服务管理
  -- 是内核


systemd
*一个更高效的系统&服务



RHEL6 运行级别
        0：关机
        1：单用户模式（基本功能的实现，破解Linux密码）
        2：多用户字符界面（不支持网络）
        3：多用户字符界面（支持网络） 服务器默认的运行级别
        4：未定义
        5：图形界面  
        6：重起
  
  切换运行级别：init 5


RHEL7 运行模式
    字符模式：multi-user.target
    图形模式：graphical.target  

当前直接切换到图形模式
[root@svr7 ~]# systemctl isolate graphical.target 
当前直接切换到字符模式
[root@svr7 ~]# systemctl isolate multi-user.target 

[root@svr7 ~]# systemctl set-default multi-user.target
[root@svr7 ~]# systemctl get-default 













