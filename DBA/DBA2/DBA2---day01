2019-03-18

############################<DBA2--day01>##########################################
MySQL主从同步


主从同步原理：
  一、Master，记录数据更改操作
	1.启用binlog日志
	2.设置binlog日志格式u
	3.设置server_id
  二、Slave运行2个线程
	1.Slave_IO：复制master主机 binlog日志文件里的SQL命令到本机的relay-log文件里
	2.Slave_SQL:执行本机relay-log文件里的SQL语句，重现Master的数据操作

构建主从同步：
	基本思路：
	1. 确保数据相同
		从库必须要有主库上的数据。（在配置前主从服务器上的数据一致）
		否则，从库的Slave_SQL线程会挂掉
	2.配置主服务器
		启动binlog日志、授权用户(从库连接主库用)、查看当前正使用的日志
	3.配置从服务器
		设置server_id，指定主库信息
	4.测试配置
		客户端连接主库写入数据，在从库上也能查询到


1.2.1 配置主库 192.168.4.51
	]# vim /etc/my.cnf
	   [mysql]
		server_id=51
		log-bin="master51"
	]# systemctl restart mysqld

 mysql> grant replication slave on *.* to repluser@"%" identified by "123456"; 
 mysql> show master status;

1.2.2 配置从库 192.168.4.52
	]# vim /etc/my.cnf
	   [mysql]
		server_id=52
		......
	]# systemctl restart mysqld
	]# mysql -uroot -p123456
	mysql> show slave status;  #查看slave状态信息
	mysql> change master to
	     > master_host="192.168.4.51",
	     > master_user="repluser",
	     > master_password="123456",
	     > master_log_file="master51.000001",
	     > master_log_pos=441;	
	mysql> show slave status\G;  #查看slave状态（这里两个线程是NO状态）
	mysql> start slave;    #开启从库
	mysql> show slave status\G;
		............
		Master_Host: 192.168.4.51
             Slave_IO_Running: Yes   #这两个必须同时是yes状态
            Slave_SQL_Running: Yes

	mysql> system cat /var/lib/mysql/master.info


1.2.3 测试主从同步配置
	1. 在主库51上添加访问数据的连接用户
		mysql> create database db6;
		mysql> grant all on db6.* to good@"%" identified by "123456";
	2. 客户端50连接主库51 存储数据
		]# mysql -h192.168.4.51 -uroot -p123456
		mysql> use db6;
		mysql> create table t1(id int);
		mysql> insert into t1 values(110);		

	3 从库52管理员本机登陆查看-
			可以查看到与主库一样的数据
	

1.2.4 主从同步排错（）
             1）Slave_IO_Running: NO   #这两个必须同时是yes状态
		mysql> show slave status\G;
		Last_IO_Error: 
			1.UUID相同： ]# cat /var/lib/mysql/auto.cnf #修改UUID，长度不能改变
			2.密码错误：在主服务器上修改授权用户密码
			mysql> set password for good@"%"=password("123456");
			3.指定主库信息时密码错误：
			]# cat /var/lib/mysql/master.info  #用查出来的用户名和密码连接数据库
			mysql> stop slave;  #主库信息指错时，先停了从库，再重新指定主库信息
			mysql> change master to master_password=""; #重新指密码
			4.指定主库信息时日志指错：

            2）Slave_SQL_Running: NO
		mysql> show slave status\G;  #首先查看slave的状态
		Last_SQL_Error:  #根据报错日志排错
		mysql> stop slave;

1.4 把从库 还原独立的数据库服务器：  将相关文件删除，并重启mysqld服务
从服务器相关文件：
	master.info             #主库信息
	elay-log.info          #中继日志信息
	主机名-relay-bin.xxxxxx  #中继日志
	主机名-relay-bin.index   #索引文件

	]# cd /var/lib/mysql
  	]# rm -rf master.info 
	]# rm -rf relay-log.info 
	l]# rm -rf mysql-52-relay-bin.00000*
	]# rm -rf mysql-52-relay-bin.index 
	]# systemctl restart mysqld
	]# mysql -uroot -p123456
	mysql> show slave status\G;  #查看结果为空


1.5 mysql主从同步常用配置项 : 库名都可以设置多个
	1.5.1 写在主库/etc/my.cnf文件里的常用配置（对所有的从库有效）
		]# vim /etc/my.cnf
			[mysqld]
			binlog_do_db=库名    #设置binlog日志记录那些库的日志
			binlog_ignore_db=库名  #设置master对哪些库不记录日志
			..........

	1.5.2 写在从库/etc/my.cnf文件里的常用配置（只对从库本机有效）
		适用于slave服务器：
		]# vim /etc/my.cnf
			[mysqld]
			log_slave_updates        #记录从库更新，允许链式复制（A-B-C）
			relay_log=中继日志文件名    #指定中继日志文件名
			replicate_do_db=库名       #指定同步的库，其他库将被忽略，可设置多条
			replicate_ignore_db=库名  #指定那些库不同步，其他库将被忽略
			..........

1.6 主从同步结构
	1.6.1 主从同步结构分类
		基本应用：单项复制--->一主一从   单点故障
*************************************************************************************************
	1.6.2 配置mysql主从同步  一主多从 : 53(主库)---->54(从)----->55(从)
		
	配置53主库：
		1 启用binlog日志
		2 用户授权
		3 查看binlog日志信息
	]# vim /etc/my.cnf
		[mysql]
		server_id=53
		log-bin="master53"
		...
	]# systemctl restart mysqld
	mysql> grant replication slave on *.* to repluser@"%" identified by "123456";
	mysql> show master status;

	配置54、55从库：
		1 指定server_id
		2 指定主库信息
		3 启动slave
		4 查看状态信息		
	]# vim /etc/my.cnf
		[mysq]
		server_id=54/55
		......
	]# systemctl restart mysqd
	mysql> change master to 
	    	> master_host="192.168.4.53",
		> master_user="repluser",
		> master_password="123456",
		> master_log_file="master53.000001",
		> master_log_pos=数字441;
	mysql> start slave;
	mysql> show slave status\G;

	测试配置：
	主库：
		mysql> create databae good;
		mysql> grant all on good.* to harry@"%" identified by "123456";
	客户端50：
		]# mysql -h192.168.4.53 -uharry -p123456
		mysql> use good;
		mysql> create table gg(name char(50),id int);
		mysql> insert into gg vaues("tom",001);
	从库54、55：
		登陆本机数据库，查看得到和53一样的数据
*************************************************************************************************

	1.6.3 配置mysql主从同步  主从从(链式复制) : 50(主)--->51(主、从)---->52(从)
	配置主库：
		]# vim /etc/my.cnf
		   [mysql]
		    server_id=50		  #指定id号
		    log-bin="master50"     #启动binlog日志
		    binlog_format="mixed"  #修改日志文件格式
			.........
		]# systemctl restart mysqld
	mysql> grant replication slave on *.* to  repluser@"%" identified by "123456";
	mysql> show master status;

	配置中间主、从库：
		]# vim /etc/my.cnf
			[mysql]
			server_id=51
			log-bin="master51"
			log_slave_updates      #启用级联复制功能（才能实现52从库能同步50主库的数据）
			binlog_format="mixed"  #可加可不加（主要是可以让人看得董日志）
			......
		]# systemctl restart mysqld
		mysql> change master to 
			> master_host="192.168.4.50",
			> master_user="repluser",
			> master_password="123456",
			> master_log_file="master50.000001",
			> master_log_pos=446;
		mysql> start slave;
		mysql> show slave status\G;
	mysql> grant replication slave on *.* to repluser2@"%" identified by "123456"
	mysql> show master status;

	配置最后从服务器：
		]# vim /etc/my.cnf
			[mysql]
			server_id=57
			......
		]# systemctl restart mysqld
		mysql> change master to 
			> master_host="192.168.4.51",
			> master_user="repluser2",
			> master_password="123456",
			> master_log_file="master51.000001",
			> master_log_pos=447;
		mysql> start slave;
		mysql> show slave status\G;

	客户端测试验证：
			访问50服务器写入数据，52服务器上可以同步备份50服务器上的数据

***************************************************************************************************
	1.6.4 配置mysql主从同步  主主结构--- 互为主从  56----57
	配置56 主从服务器：
		]# vim /etc/my.cnf
			[mysql]
			server_id=56
			log-bin="master56"
			....
		]# systemctl restart mysqld
	mysql> grant replication slave on *.* to gg@"%" identified by "12346";		
	mysql> show master status;

     57服务器授权结束后再返回来执行：
		mysql> change master to
			> master_host="192.168.4.57,
			> master_user="3g",
			> master_password="123465",
			> master_log_file="master57.000001",
			> master_log_pos=数字;
		mysql> start slave;
		mysql> show slave status;

	配置57 主从服务器：
		]# vim /etc/my.cnf
			[mysql]
			server_id=57
			log-bin="master57"
			.........
		]# systemctl restart mysqld
		mysql> change master to
			> master_host="192.168.4.56",
			> master_user="gg",
			> master_password="123465",
			> master_log_file="master56.000001",
			> master_log_pos=数字;
		mysql> start slave;
		mysql> show slave status;

	mysql> grant replication slave on *.* to 3g@"%" identified by "123456";
	mysql> show master status;

	客户端测试验证：
			不管访问那一台服务器写入数据，另一台都可以备份另一台服务器的数据
*************************************************************************************************

二、mysql主从同步复制模式（默认为异步复制模式）
	1 异步复制模式：
		主库执行完一次事物后，立即将结果返回给客户端，并不关心从库是否已接收并处理
		缺点：从库上可能会没有同步主库上的数据
	2 全同步复制模式：
		当主库执行完一次事物，且所有从库都执行了该事物后才返回给客户端（从库上都同步了主库的sj）
		缺点：效率低，用户体验差
	3 半同步复制模式：
		主库执行完一次事物后，等待至少一个从库接收到并写到relay log中才返回给客户端



	4 配置mysql主从同步 半同步复制模式
		
		4.1 主库启用半同步复制模式
			1. 查看当前的数据库服务是否允许动态加载模块
	mysql> show  variables  like  'have_dynamic_loading'; #默认为Yes，允许状态
		
			2. 加载模块（加载后默认已经 启用（激活）模块）
	mysql> INSTALL PLUGIN rpl_semi_sync_master   SONAME   'semisync_master.so';
	
	mysql> SELECT  PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS  WHERE PLUGIN_NAME LIKE '%semi%';

			3. 启用半同步复制模式
	mysql> SET GLOBAL rpl_semi_sync_master_enabled = 1;
	 
	mysql>  show  variables  like  "rpl_semi_sync_%_enabled"

			4. 修改配置文件设置永久生效
	]# vim /etc/my.cnf
		[mysqld]
		plugin-load=rpl_semi_sync_master=semisync_master.so
		rpl_semi_sync_master_enabled=1
		......

		4.2 从库启用半同步复制模式
			1. 查看当前的数据库服务是否允许动态加载模块
	mysql> show  variables  like  'have_dynamic_loading'; #默认为Yes，允许状态	

			2. 加载模块（加载后默认已经 启用（激活）模块）
	mysql> INSTALL PLUGIN rpl_semi_sync_slave SONAME  'semisync_slave.so';
	mysql> SELECT  PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS  WHERE PLUGIN_NAME LIKE '%semi%';	

			3. 启用半同步复制模式
	mysql> SET GLOBAL rpl_semi_sync_slave_enabled = 1;	
	mysql>  show  variables  like  "rpl_semi_sync_%_enabled";

			4. 修改配置文件设置永久生效
	]# vim /etc/my.cnf
		[mysqld]
		plugin-load=rpl_semi_sync_slave=semisync_slave.so
		rpl_semi_sync_slave_enabled=1

**一台数据库服务器即做主库、又做从库时，两种模块、功能都要加载和启用：
	mysql> show  variables  like  'have_dynamic_loading'; #默认为Yes，允许状态

	mysql> install plugin rpl_semi_sync_master soname "semisync_master.so;
	mysql> install plugin rpl_semi_sync_slave soname "semisync_slave.so;
	mysql> select plugin_name, plugin_status from information_schema.plugins where
                  plugin_name like "%semi%";

	mysql> set global rpl_semi_sync_master_enabled = 1;
	mysql> set global rpl_semi_sync_slave_enabled = 1;
	mysql>  show  variables  like  "rpl_semi_sync_%_enabled";

	[root@master51 ~]# vim /etc/my.cnf
		[mysqld]
		plugin-load \
="rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"
		rpl-semi-sync-master-enabled = 1
		rpl-semi-sync-slave-enabled = 1


































