2019-02-26

###############################################################################

代理服务器：
                   web1
用户 ---> 代理服务器 
                   web2
找代理服务器，面对的就是一群服务器

相同客户端访问相同服务器：ip_hash

nginx代理  （web，代理，正则支持好，4层代理新功能）  【httpd代理   tomcat代理】
haproxy代理（比nginx代理更快、功能更全，正则支持差）

优化：
    1.自定义报错，默认报错404，error_page 404修改  /文件
    2.查看nginx状态模块  --with-http_stub_status_module模块



http----->TCP(3次握手，4次断开)


上网1.0
client -------------->baidu(图片)
        3次握手20k
        要图片，给图片1k
        4次断开30k
上网http1.1   一次握手，多次请求
client -------------->baidu(图片)
          3次握手20k
           要图片，给图片1k
           要图片，给图片1k   20k的数据连接，可以传递大量数据
           超时时间

步骤四：优化nginx数据包头缓存
1）优化前，使用间本测试长头部请求是否能获得响应

2)修改配置文件
vim /usr/local/nginx/conf/nginx.conf
   http {
    client_header_buffer_size 1k;
     large_client_header_buffers 4 4M;
}

步骤三：优化nginx并发量
1）优化前，使用ab高并发测试
  ab -n 2000 -c 2000 http://192.168.4.5/

2)修改配置文件
  vim /usr/local/nginx/conf/nginx.conf
     #最文件的最上面
   worker_processes 2;  #实验中不能改，实际工作中改为与CPU核心数量一致
    events {
    worker_connections 65535;  #每个worker最大并发连接数
     }

步骤二：如何查看服务器状态信息（非常重要）
1）  需要添加--with-http_stub_status_module模块

2）启用nginx服务并查看监听端口状态
   netstat -antulp | grep nginx
3)修改配置文件
  vim /usr/local/nginx/conf/nginx.conf
    .....
    location /status {
   stub_status on;
   #allow ip地址;
   #deny ip 地址;
           
}


#######################################################################

概念:
     Session:存储在服务器端,保存用户名、登陆状态等信息。
     Cookies:由服务器下发给客户端,保存在客户端的一个文件里。(浏览器)
              保存的内容主要包括:SessionID。

client ------------------>server    SID
    1 用户名，密码--------->验证（登陆成功）：生成文件（tom ，logined）
    2 返回页面 <-------------------
           数据包的头部信息（cookies：SID）(浏览器保存了cookie)
    3 浏览器保存cookies=SID
 client F5（刷新后会再次发送请求）--------------->server
    4 再次访问服务器（cookies）---SID      根据ID找文件（找得到则不用再次登陆、找不则需要进行再次登陆操作）

##################################################################

2. 案例 2:构建 memcached 服务
本案例要求先快速搭建好一台 memcached 服务器,并对 memcached 进行简单的增、
删、改、查操作:
    安装 memcached 软件,并启动服务
    使用 telnet 测试 memcached 服务
    对 memcached 进行增、删、改、查等操作

步骤一：构建memcached服务
1）安装memcached软件
  yum -y install memcached
2)memcached配置文件（查看即可，不需要修改）
   /usr/lib/systemd/system/memcached.service

调用的文件路径：
[ ]# vim /etc/sysconfig/memcached
    PORT="11211"
    USER="memcached"
    MAXCONN="1024"
    CACHESIZE="64"
    OPTIONS=""

3)启动服务并查看网络连接状态验证是否开启成功：
[  ]# netstat -antulp | grep memcached
或者
[  ]# ss -antulp | grep memcached


步骤二：使用telnet访问memcached服务器
1）安装telnet软件
[  ]# yum -y install telnet

2)使用telnet连接服务器测试memcached服务器功能，包括增、删、改、查等
[  ]# telnet  ip  端口号
[  ]# telnet  192.168.4.5  11211
----进入一个交互式界面
Trying 192.168.4.5...
......
##提示:0 表示不压缩,180 为数据缓存时间,3 为需要存储的数据字节数量。
set name 0 180 3 //定义变量,变量名称为 name 0表示不压缩 
plj
STORED //输入变量的值,值为 plj
get name //获取变量的值
VALUE name 0 3
plj
END //输出结果
##提示:0 表示不压缩,180 为数据缓存时间,3 为需要存储的数据字节数量。
add myname 0 180 10 	//新建,myname 不存在则添加,存在则报错
set myname 0 180 10	 //添加或替换变量
replace myname 0 180 10  //替换,如果 myname 不存在则报错
get myname 			//读取变量
append myname 0 180 10   //向变量中追加数据
delete myname 		//删除变量
flush_all 			//清空所有
quit 				//退出登录
stats                    #查看memcached信息


######################################################################

3.案例3：LNMP+memcached（存放用户的登陆状态信息，丢失也不会有太大的影响）

因为默认session是存放在本地，所以集群有问题
  memcached数据库：基于内存存数据----快，简单（没有表，没有数据库的概念）
     KV形式存储数据  key=value  变量的形式
  memcached重启后所有数据全部丢失（内存条的特点）

1) 需要安装memcached扩展包：php-pel-memcache
[root@web1 html]# yum -y install php-pecl-memcache
[root@web2 html]# yum -y install php-pecl-memcache

2)修改配置文件
[root@web1 nginx]# vim /etc/php-fpm.d/www.conf 
.....
php_value[session.save_handler] = memcache    #以memcache数据库形式存放
php_value[session.save_path] = "tcp://192.168.2.5:11211"  #存放位置为数据库

3)重启服务
[root@web1 ~]# systemctl restart php-fpm






































