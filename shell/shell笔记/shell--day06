

1 案例1：使用awk提取文本

步骤一：awk文本过滤的基本用法
1）基本操作方法
格式：awk [选项] ‘[条件]{指令}’ 文件

print是最常用的编辑指令；若有多条编辑指令，可用分号隔开。
处理文本时，若未指定分隔符，则默认将空格、制表符等作为分隔符。

[  ]# df -h | awk '{print $4}'   #打印出磁盘的剩余空间

2）选项 -F 可指定分隔符
[ ]# awk -F: '{print $1,$7}' /etc/passwd  #输出passwd文档中以分号分隔的第1、7个字段

awk还识别多种单个的字符
[ ]# awk -F[;/] '{print $1,$10}' /etc/passwd

awk常用的内置变量：
	$0 文本当前行的全部内容
	$1 文本的第1列 
	$2 文本的第2列
	$3 文本的第3列，以此类推
	NR 文件当前行的行号
	NF 文件当前行的列数（有几列）

awk的print指令还可以打印出常量，需要用""引起来
[  ]# awk -F: '{print $1,"的解释器是：",$7}' /etc/passwd
    root 的解释器是：/bin/bash
    bin 的解释器是：/sbin/nologin
   ......

#############################################################################
步骤二：利用awk提取本机的网络流量、根分区剩余容量、获取远程失败的IP地址

1)提取出ip地址：通过ifcongig eth0 查看网卡信息，其中包括网卡流量：
[  ]# ifconfig eth0
.........

RX 为接收的数据量，TX为发送的数据量。packets以数据包的数量为单位，bytes以字节为单位：
[  ]# ifconfig eth0 | awk '/RX p/{print $5}'  #过滤接收数据的流量

[  ]# ifconfig eth0 | awk '/TX p/'{print $5}  #过滤发送数据的流量

2）提取根分区剩余容量：通过 df 命令查看根分区的使用情况，其中包括剩余容量：
[  ]# df -h /
文件系统             容量     已用     可用     已用%     挂载点
/dev/sda2         19G         7.2G     11G         40%         /

[  ]# df -h | awk '/\/$/{print $4}'
或者
[  ]# df -h | tail -1 | awk '{print $4}'

3)根据/var/log/secure日志文件，过滤远程连接密码失败的IP地址
[  ]# awk '/Failed/{print $11}' /var/log/secure
192.168.2.254
............

############################################################################
步骤三：格式化输出/etc/passwd文件

1)awk处理的时机
   awk会逐行处理文本，支持在处理第一行之前做一些准备工作，以及在处理完最后一行之后做一些总结性质的工作。格式如下：
   awk [选项] '[条件]{指令}'  文件
   awk [选项] 'BEGIN{指令}{指令}END{指令}' 文件

BEGIN{} 行前处理，读取文件内容前执行，指令执行 1 次
{} 逐行处理，读取文件过程中执行，指令执行n次
END{} 行后处理，读取文件结束后执行，指令执行 1 次

值做预处理的时候，可以没有操作文本，比如：
[  ]# awk 'BEGIN{a=24;print a*2}'   #在输出结果之前，先给a赋值，再输出a*2的值
[  ]# awk 'BEGIN{print x+1}'  #x可以不定义，直接用，默认值为0

例子：统计系统中使用bash作为登陆shell的用户的总个数：
思路：预处理时赋值变量x=0、然后逐行读如/etc/passwd文件。如果发现登陆shell是/bin/bash则x加 1、全部处理完毕后，输出x的值即可：
[  ]# awk 'BEGIN{x=0}/bash$/{x++}END{print x}' /etc/passwd


2)格式化输出/etc/passwd文件
要求：格式化输出passwd文件内容时，要求第一行为列表标题，中间打印用户的名称、UID、家目录信息、最后一行提示一共已处理文本的总行数：
[ ]# awk 'BEGIN{print "User\tUID\tHome"}{print $1 "\t" $3 "\t" $6}END{print "Total",RN,"lines."}' /etc/passwd   #"\t"显示Tab制表位

############################################################################
2 案例2：awk处理条件
本案例要求使用awk工具完成下列过滤任务，注意awk处理条件的设置：
	列出UID间于1~1000的用户详细信息
	输出/etc/hosts文件内以127或192开头的记录
	列出100以内整数中7的倍数或是含7的数

步骤一：认识awk处理条件的设置
1）使用正则设置条件
输出其中以bash结尾的完整记录：
[  ]# awk -F: '/bash$/{print}' /etc/passwd

输出包含root的行数据：
[  ]# awk -F: '/root/{print}' /etc/passwd

输出root或adm账户的用户名和UID信息：
[  ]# awk -F: '/^(root|adm)/{print $1,$3}' /etc/passwd

输出账户名称包含root的基本信息（第1列包含root）：
[  ]# awk -F: '$1~/root/{print}' /etc/passwd
或者
[  ]# awk -F: '$~/root/' /etc/passwd

输出其中登录Shell不以nologin结尾（对第7个字段做!~反向匹配）的用户名、登录Shell信息：
[  ]# awk -F: '$7!~/nologin$/{print $1,$7}' /etc/passwd



2）使用数值/字符串比较设置条件
比较符号：==(等于)      !=（不等于） >（大于）
          >=（大于等于） <（小于）   <=（小于等于）
输出第3行（行号NR等于3）的用户记录：
[  ]# awk -F: 'NR==3{print}' /etc/passwd

输出账户UID大于等于1000的账户名称和UID信息：
[  ]# awk -F: '$3>=1000{print $1,$3}'

输出账户UID小于10的账户名称和UID信息：
[  ]# awk -F: '$3<10{print $1,$3}' /etc/passwd

输出用户名为“root”的行：
[  ]# awk -F: '$1==root' /etc/passwd


3）逻辑测试条件
输出账户UID大于10并且小于20的账户信息：
[  ]# awk -F: '$3>10 && $3<20' /etc/passwd

输出账户UID大于1000或者账户UID小于10的账户信息：
[  ]# awk -F: '$3>1000 || $3<10' /etc/passwd















     





































