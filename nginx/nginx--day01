2019-02-22

web服务器
    业务展现的形式都是web：电商、游戏、交易、论坛、邮箱...
    如何建立一个更安全、可靠的web
    建立app的目的： app+绑定某一个网站   [浏览器]+访问任何页面
     互联网的入口


添加eth1网卡：
[  ]# nmcli connection add type ethernet con-name eth1 ifname eth1
[  ]# nmcli connection modify eth1 ipv4.method manual ipv4.addresses 192.168.2.100/24 connection.autoconnect yes
[  ] # nmcli connection up eth1


###################################################################

web服务器对比
Unix和Linux平台下
   ---- Apache、Nginx、Tengine、Lighttpd
   ---- Tomcat、IBM WebSphere、Jboss
Windows平台下
    -- 微软公司的IIS（Internet Information Server）

nginx不支持 java语言
######################################################################

Nginx简介：
  --俄罗斯人编写的十分轻量级的HTTP服务器
  --是一个高性能的HTTP和反向代理服务器，同时也是一个IMAP/POP3/SMTP代理服务器
  --官方网站：http：//nginx.org/

Nginx配置文件及目录：
  -- /usr/local/nginx/   #安装目录
  -- conf/nginx.conf    #主配置文件
  -- html               #网页目录
  -- logs               #日志文件
  -- sbin/nginx         #启动脚本(sbin程序文件)


进入一个网页：f12---》可看到代码

************************************************************************************
QQ程序：可以读取所有的文件
360 QQ保镖 ---> qq 大战 360
不攻击计算机，改攻击nginx、httpd、mysql等软件，获取到权限，进而攻击计算机
一般情况下：安装了一个软件后，会生成一个与软件名的用户来执行相应的程序
比如：安装 systemctl -y install apache 可以得到一个apache用户 [ ]#id apache
************************************************************************************

######################################################################
1 案例1：搭建Nginx服务器
在IP地址为192.168.4.5的主机上安装部署Nginx服务，要求编译时启用如下功能：
    *支持SSL加密功能
    *设置Nginx账户及组名称均为nginx
   *Nginx服务器升级到更高版本

步骤一：构建Nginx服务器
1）使用源码包安装nginx软件包
[root@proxy ~]# yum -y install gcc pcre-devel openssl-devel   //安装依赖包
[root@proxy ~]# useradd -s /sbin/nologin nginx   #将用户自动降级为普通用户
[root@proxy ~]# tar  -xf   nginx-1.10.3.tar.gz  #可以用 -C 指定解压的路径
[root@proxy ~]# cd  nginx-1.10.3
[root@proxy nginx-1.10.3]# ./configure   \---->换行 #运行
> --prefix=/usr/local/nginx   \                    #指定安装路径（默认路径）
> --user=nginx   \                                 #指定用户
> --group=nginx  \                                 #指定组
> --with-http_ssl_module                           #开启SSL加密功能
[root@proxy nginx-1.10.3]# make                    #编译为可执行的二进制代码
[root@proxy nginx-1.10.3]# make install            #安装

2）nginx命令的用法：
[proxy ~]# /usr/local/nginx/sbin/nginx     //启动服务(只能启动一次，再次启动会报错)
[ ~]# /usr/local/nginx/sbin/nginx -s stop    //关闭服务
[ ~]# /usr/local/nginx/sbin/nginx -s reload   //重新加载配置文件,要在服务开启下
[ ~]# /usr/local/nginx/sbin/nginx -V           //查看软件信息
[ ~]# ln -s /usr/local/nginx/sbin/nginx /sbin/   //软连接制作方便后期使用


netstat命令可以查看系统中启动的端口信息，该命令常用选项如下：
    	-a显示所有端口的信息
    	-n以数字格式显示端口号
	-t显示TCP连接的端口
	-u显示UDP连接的端口
	-l显示服务正在监听的端口信息，如httpd启动后，会一直监听80端口
	-p显示监听端口的服务名称是什么（也就是程序名称
nginx服务默认通过TCP 80端口监听客户端请求：
  [ ~]# netstat  -anptu  |  grep nginx

3）设置防火墙与SELinux（非必须的操作，如果有则关闭）
[root@proxy ~]# firewall-cmd --set-default-zone=trusted
[root@proxy ~]# setenforce 0

4）测试首页文件
     Nginx Web服务默认首页文档存储目录为/usr/local/nginx/html/，在此目录下默认有一个名为index.html的文件，使用客户端访问测试页面：

[root@proxy ~]# curl http://192.168.4.5  #命令行测试

##########################################################################

步骤二：升级Nginx服务器
为什么要更新版本：
	老版本有问题---->新版本
	老版本功能少，想体验新的功能---->新版本

1）编译新版本nginx软件
[root@proxy ~]# tar  -zxvf   nginx-1.12.2.tar.gz
[root@proxy ~]# cd nginx-1.12.2
[root@proxy nginx-1.12.2]# ./configure   \
> --prefix=/usr/local/nginx   \ 
> --user=nginx   \ 
> --group=nginx  \ 
> --with-http_ssl_module
[root@proxy nginx-1.12.2]# make   #此处后不能再进行make install命令

[ nginx-1.12.2]# mv /usr/local/nginx/sbin/nginx  \
>/usr/local/nginx/sbin/nginxold
[ nginx-1.12.2]# cp objs/nginx  /usr/local/nginx/sbin/      //拷贝新版本
[ nginx-1.12.2]# make upgrade   #升级，没有报错则进行查看版本
[root@proxy ~]# /usr/local/nginx/sbin/nginx –v            //查看版本


步骤三：客户端访问测试
1）分别使用浏览器和命令行工具curl测试服务器页面
[root@client ~]# firefox http://192.168.4.5
[root@client ~]# curl http://192.168.4.5

#######################################################################

2 案例2：用户认证
  每一个server是一个虚拟主机（一个网站）
  server{
     listen   80;
     server_name localhost;  #访问的
     root html;              #没有写路径，默认为/usr/local/nginx/html
   }

2.2 方案
模板配置文件框架如下：
[root@proxy ~]# vim  /usr/local/nginx/conf/nginx.conf
全局配置（用户名,日志,进程)
http{
    server{
        listen 80;
        server_name localhost;
        root html;
       }
       server{
        listen 80;
        server_name www.xyz.com;
        root www;
       }
}

2.1 问题

沿用练习一，通过调整Nginx服务端配置，实现以下目标：
    访问Web页面需要进行用户认证
    用户名为：tom，密码为：123456

步骤一：修改Nginx配置文件

1）修改/usr/local/nginx/conf/nginx.conf
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
server {
    listen       80;
    server_name  localhost;
    auth_basic "Input Password:";   //认证提示符(这里写的是什么，页面解显示什么)
    auth_basic_user_file "/usr/local/nginx/pass";  //认证密码文件（需要自己创建）
    location / {
        root   html;
        index  index.html index.htm;
        }
  }


2）生成密码文件，创建用户及密码
   使用htpasswd命令创建账户文件，需要确保系统中已经安装了httpd-tools。
[~]# yum -y install  httpd-tools
[~]# htpasswd -c /usr/local/nginx/pass   tom   //创建密码文件 -c-->create 第一次创建时需要加 -c，追加用户时不需要加-c 
New password: 
Re-type new password: 
Adding password for user tom

[~]# htpasswd  /usr/local/nginx/pass jerry  //追加用户，不使用-c选项
[~]# cat /usr/local/nginx/pass

3）重启Nginx服务
[root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload    //重新加载配置文件    
#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：
#[error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)

步骤二：客户端测试
1）登录192.168.4.10客户端主机进行测试
[root@client ~]# firefox http://192.168.4.5       //输入密码后可以访问


############################################################################

3 案例3：基于域名的虚拟主机
：门户网站，电商网站，论坛，企业邮箱....

3.1 问题

沿用练习二，配置基于域名的虚拟主机，实现以下目标：
  1. 实现两个基于域名的虚拟主机，域名分别为www.a.com和www.b.com
  2. 对域名为www.a.com的站点进行用户认证，用户名称为tom，密码为123456
3.2 方案
      修改Nginx配置文件，添加server容器实现虚拟主机功能；对于需要进行用户认证的虚拟主机添加auth认证语句。
虚拟主机一般可用分为：基于域名、基于IP和基于端口的虚拟主机

http {
   server {
      listen   xx;
      server_name  www.a.com;
      location / {
        root html;
        index  index.html  index.htm;
         } 
     }

}

步骤一：修改配置文件
1）修改Nginx服务配置，添加相关虚拟主机配置如下
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
去掉注释：末行模式--->:行号，行号 s/#// 将#替换为空
.. ..
server {
        listen       80;                               //端口
        server_name  www.a.com;                       //域名
        auth_basic "Input Password:";                    //认证提示符
        auth_basic_user_file "/usr/local/nginx/pass";    //认证密码文件
        location / {
            root   html;                                 //指定网站根路径
            index  index.html index.htm;
       }  
}
… …
    server {
        listen  80;                       //端口
        server_name  www.b.com;          //域名
        charset utf-8                   #支持中文
        location / { 
          root   web;                     //指定网站根路径
          index  index.html index.htm;
       }
}

2）创建网站根目录及对应首页文件
[root@proxy ~]# mkdir /usr/local/nginx/www
[root@proxy ~]# echo "<h1>你好！！" > /usr/local/nginx/www/index.html

3）重启nginx服务
[root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload  #确保服务是开启的

步骤二：客户端测试

1）修改客户端主机192.168.4.10的/etc/hosts文件，进行域名解析 （本地解析）
[root@client ~]# vim /etc/hosts
192.168.4.5    www.a.com  www.b.com

2）登录192.168.4.10客户端主机进行测试
[root@client ~]# firefox http://www.a.com        //输入密码后可以访问
[root@client ~]# firefox http://www.b.com       //直接访问

#########################################################################

步骤三：扩展课外实验：其他类型的虚拟主机
1.基于端口的虚拟主机（参考模板）
[ ]# vim /usr/local/nginx/conf/nginx.conf
....
server {
        listen       8080;                      //端口
        server_name  web1.example.com;          //域名
        ......
}
    server 
        listen       8000;                       //端口
        server_name  web1.example.com;           //域名
      .......
}


2.基于IP的虚拟主机（参考模板）
[ ]# vim /usr/local/nginx/conf/nginx.conf
....
server 
        listen       192.168.0.1:80;            //IP地址与端口
        server_name  web1.example.com;          //域名
  ... ...
}
    server {
        listen       192.168.0.2:80;            //IP地址与端口
        server_name  web1.example.com;
... ...
}


最早的编码：ASCII --->0~127个数字
          GB2312
apple+公司：大编码【utf-8】万国编码


[root@proxy ~]# cd /root/lnmp_soft/php_scripts/
[root@proxy ~]# tar -xf web_demo.tar.gz   #网页模板压缩包
[root@proxy web_demo]# ls
demo01  demo02  demo03

#######################################################################

4 案例4：SSL虚拟主机

4.2 方案

源码安装Nginx时必须使用--with-http_ssl_module参数，启用加密模块，对于需要进行SSL加密处理的站点添加ssl相关指令（设置网站需要的私钥和证书）。
     加密算法一般分为对称算法、非对称算法、信息摘要。
     1.对称算法有：AES、DES，主要应用在单机数据加密。
     2.非对称算法有：RSA、DSA，主要应用在网络数据加密。
     3.信息摘要：MD5、sha256，主要应用在数据完整性校验。  (只跟内容有关)
除了MD5外，其他的都很安全

对称加密：加密和解密是同一把钥匙(不适合在网上使用)  111--->111  
非对称加密：加密和解密是两把钥匙  123--->2zdcf3f

     lucy     马tmall(公钥、私钥)
       公钥
             抓包者【用户名、帐号/公钥】
用户访问网页的时候，同时传递公钥给用户，私钥始终掌握在公司手中，不会泄露

md5sum


步骤一：配置SSL虚拟主机
1）生成私钥与证书
[root@proxy ~]# cd /usr/local/nginx/conf
[root@proxy ~]# openssl genrsa > cert.key           //生成私钥
[root@proxy ~]# openssl req -new -x509 -key cert.key > cert.pem  //生成证书

2）修改Nginx配置文件，设置加密网站的虚拟主机
[root@proxy ~]# vim  /usr/local/nginx/conf/nginx.conf
… …    
server {
        listen       443 ssl;
        server_name            www.c.com;
        ssl_certificate      cert.pem;         #这里是证书文件
        ssl_certificate_key  cert.key;         #这里是私钥文件
        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;
        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;
        location / {
            root   html;
            index  index.html index.htm;
        }
    }

客户机验证：
[root@proxy conf]# vim /etc/hosts  #域名解析
192.168.4.5 www.a.com www.b.com www.c.com
[root@proxy conf]# firefox https://www.c.com




客户验证的时候会提示 不信任
浏览器不信任（有合作关系的CA机构制作）

















